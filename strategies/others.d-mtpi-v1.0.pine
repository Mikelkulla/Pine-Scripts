//@version=6
strategy("OTHERS.D MTPI", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=99, initial_capital=10000)
// Import TradingView technical analysis library
import TradingView/ta/7 as ta

// ———— Backtest Date Inputs ———— //
// Define start date for backtesting
startDate = input.time(timestamp("2020-01-01"), "Start Date", group="Backtest Settings")
// Set end date to current date
endDate = timestamp(year, month, dayofmonth, 0, 0)
// Check if current bar is within backtest period
inBacktestPeriod = (time >= startDate and time <= endDate)

// ———— General Settings ———— //
// Select trade mode: Long Only or Long and Short
tradeMode = input.string("Long and Short", "Trade Mode", options=["Long Only", "Long and Short"], group="General Settings")

// TOGGLE INDICATORS
    
fdi_enabled = input.bool(true, "Enable FDI-Adaptive Supertrend", group="Toggle Indicators")                         // ———— Toggle Indicator 1: FDI-Adaptive Supertrend on/off
med_st_enabled = input.bool(true, "Enable Median Supertrend", group="Toggle Indicators")                            // ———— Toggle Indicator 2: Median Supertrend
htvs_enabled = input.bool(true, "Enable Hyperbolic Tangent Volatility Stop", group="Toggle Indicators")             // ———— Toggle Indicator 3: Hyperbolic Tangent Volatility Stop
dema_afr_enabled = input.bool(true, "Enable Dema AFR", group="Toggle Indicators")                                   // ———— Toggle Indicator 4: Dema AFR
nkama_enabled = input.bool(true, "Enable Normalized KAMA Oscillator", group="Toggle Indicators")                    // ———— Toggle Indicator 5: Normalized KAMA Oscillator
datr_enabled = input.bool(true, "Enable DEMA Adjusted Average True Range", group="Toggle Indicators")


// =======================================================================================================================================
// ———— Indicator 1: Median Supertrend | viResearch ———— //
// =======================================================================================================================================

// Input for Supertrend ATR period
med_st_subject = input.int(10, "Supertrend Len", minval=2, group="Median Supertrend Settings")
// Input for Supertrend multiplier
med_st_mul = input.float(2.15, "Supertrend Multiple", step=0.05, group="Median Supertrend Settings")
// Input for median smoothing length
med_st_slen = input.int(14, "Median Length", group="Median Supertrend Settings")
// Input for source data (default: close)
med_st_src_me = input.source(close, "Median Source", group="Median Supertrend Settings")

// Calculate median-smoothed price using percentile rank
med_st_smooth = ta.percentile_nearest_rank(med_st_src_me, med_st_slen, 50)

// Function to compute Median Supertrend
med_st_Median_Supertrend(_mul, _atrPeriod) =>
    src = med_st_smooth
    atr = ta.atr(_atrPeriod)  // Calculate ATR
    u = src + _mul * atr      // Upper band
    l = src - _mul * atr      // Lower band
    pl = nz(l[1])             // Previous lower band
    pu = nz(u[1])             // Previous upper band
    l := l > pl or close[1] < pl ? l : pl  // Update lower band
    u := u < pu or close[1] > pu ? u : pu  // Update upper band
    var int d = na            // Direction variable
    var float st = na         // Supertrend value
    pt = st[1]                // Previous Supertrend
    if na(atr[1])
        d := 1                // Initial direction
    else if pt == pu
        d := close > u ? -1 : 1  // Direction based on upper band
    else
        d := close < l ? 1 : -1  // Direction based on lower band
    st := d == -1 ? l : u     // Set Supertrend value
    [st, d]

// Compute Supertrend and direction
[med_st_x, med_st_d] = med_st_Median_Supertrend(med_st_mul, med_st_subject)

// Detect long signal (direction crosses under 0)
med_st_stl = ta.crossunder(med_st_d, 0)
// Detect short signal (direction crosses over 0)
med_st_sts = ta.crossover(med_st_d, 0)

// Confirm signals within backtest period
med_st_L = med_st_stl and barstate.isconfirmed and inBacktestPeriod
med_st_S = med_st_sts and barstate.isconfirmed and inBacktestPeriod

// Track signal state
var int med_st_vii = 0
if med_st_L and not med_st_S
    med_st_vii := 1       // Long signal
else if med_st_S
    med_st_vii := -1      // Short signal

// Assign score for strategy, 0 if disabled
var int med_st_score = 0
if med_st_enabled
    if med_st_L
        med_st_score := 1     // Long score
    else if med_st_S
        med_st_score := -1    // Short score


// =======================================================================================================================================
// ———— Indicator 2: FDI-Adaptive Supertrend w/ Floating Levels [Loxx] ———— //
// =======================================================================================================================================

// Input for source data (user-specified: ohlc4)
fdi_src = input.source(ohlc4, "Source", group="FDI-Adaptive Supertrend Settings")
// Input for fractal period (user-specified: 8)
fdi_per = input.int(8, "Fractal Period Ingest", group="FDI-Adaptive Supertrend Settings")
// Input for speed adjustment (user-specified: 30)
fdi_speed = input.int(30, "Speed", group="FDI-Adaptive Supertrend Settings")
// Input for Supertrend multiplier (user-specified: 3.25)
fdi_mult = input.float(3.25, "Multiplier", group="FDI-Adaptive Supertrend Settings")
// Input to enable adaptive period
fdi_adapt = input.bool(true, "Make it adaptive?", group="FDI-Adaptive Supertrend Settings")

// Colors for plotting
fdi_greencolor = #2DD204
fdi_redcolor = #D2042D

// Custom RMA (Running Moving Average) function
fdi_RMA(x, t) =>
    EMA1 = x
    EMA1 := na(EMA1[1]) ? x : (x - nz(EMA1[1])) * (1/t) + nz(EMA1[1])
    EMA1

// FDI (Fractal Dimension Index) calculation
fdi_fdip(float src, int per, int speedin) =>
    float fmax = ta.highest(src, per)  // Highest price in period
    float fmin = ta.lowest(src, per)   // Lowest price in period
    float length = 0
    float diff = 0
    for i = 1 to per - 1
        diff := (nz(src[i]) - fmin) / (fmax - fmin)  // Normalized difference
        if i > 0
            length += math.sqrt(math.pow(nz(diff[i]) - nz(diff[i + 1]), 2) + (1 / math.pow(per, 2)))
    float fdi = 1 + (math.log(length) + math.log(2)) / math.log(2 * per)  // FDI value
    float traildim = 1 / (2 - fdi)    // Trail dimension
    float alpha = traildim / 2        // Alpha for speed adjustment
    int speed = math.round(speedin * alpha)  // Adjusted speed
    speed

// Supertrend calculation
fdi_pine_supertrend(float src, float factor, int atrPeriod) =>
    float atr = fdi_RMA(ta.tr(true), atrPeriod)  // ATR using RMA
    float upperBand = src + factor * atr  // Upper band
    float lowerBand = src - factor * atr  // Lower band
    float prevLowerBand = nz(lowerBand[1])  // Previous lower band
    float prevUpperBand = nz(upperBand[1])  // Previous upper band
    
    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int direction = na        // Direction variable
    float superTrend = na     // Supertrend value
    float prevSuperTrend = superTrend[1]
    if na(atr[1])
        direction := 1            // Initial direction
    else if prevSuperTrend == prevUpperBand
        direction := close > upperBand ? -1 : 1  // Direction based on upper band
    else
        direction := close < lowerBand ? 1 : -1  // Direction based on lower band
    superTrend := direction == -1 ? lowerBand : upperBand  // Set Supertrend
    [superTrend, direction]

// Calculate adaptive period using FDI
fdi_masterdom = fdi_fdip(fdi_src, fdi_per, fdi_speed)
int fdi_len = math.floor(fdi_masterdom) < 1 ? 1 : math.floor(fdi_masterdom)
fdi_len := nz(fdi_len, 1)

// Compute Supertrend with adaptive or fixed period
[fdi_supertrend, fdi_direction] = fdi_pine_supertrend(fdi_src, fdi_mult, fdi_adapt ? fdi_len : fdi_per)

// Detect long and short signals with delayed confirmation
fdi_goLong = fdi_direction == -1 and fdi_direction[1] == 1 and barstate.isconfirmed and inBacktestPeriod
fdi_goShort = fdi_direction == 1 and fdi_direction[1] == -1 and barstate.isconfirmed and inBacktestPeriod

// Assign score for strategy, 0 if disabled
var int fdi_score = 0
if fdi_enabled
    if fdi_goLong
        fdi_score := 1        // Long score
    else if fdi_goShort
        fdi_score := -1       // Short score



// =======================================================================================================================================
// ———— Indicator 3: Hyperbolic Tangent Volatility Stop ———— //
// =======================================================================================================================================

// ———— Functions ———— //
// Hyperbolic Tangent function
tanh(x) =>
    e_x = math.exp(x)
    e_neg_x = math.exp(-x)
    (e_x - e_neg_x) / (e_x + e_neg_x)

// Hyperbolic Tangent Moving Average
htma(src, len, mul) =>
    tanh_src = tanh((src - ta.sma(src, len)) * mul) * ta.stdev(src, len) + ta.sma(src, len)
    ta.sma(tanh_src, len)

// Volatility Stop for HTVS
htvs_volStop(src, atrlen, atrfactor) =>
    if not na(src)
        var max = src
        var min = src
        var uptrend = true
        var float stop = na
        atrM = nz(ta.atr(atrlen) * atrfactor, ta.tr)
        max := math.max(max, src)
        min := math.min(min, src)
        stop := nz(uptrend ? math.max(stop, max - atrM) : math.min(stop, min + atrM), src)
        uptrend := src - stop >= 0.0
        if uptrend != uptrend[1]
            max := src
            min := src
            stop := uptrend ? max - atrM : min + atrM
        [stop, uptrend]

// Function to calculate source based on string
calc_src(src_str) =>
    switch src_str
        "open" => open
        "high" => high
        "low" => low
        "close" => close
        "oc2" => math.avg(open, close)
        "hl2" => math.avg(high, low)
        "occ3" => math.avg(open, close, close)
        "hlc3" => math.avg(high, low, close)
        "ohlc4" => math.avg(open, high, low, close)
        "hlcc4" => math.avg(high, low, close, close)
        => close  // default
var string intraday_tooltip = "Updates the Long/Short signal within the bar, but may cause intra-bar signal repainting. This setting also affects alerts."
simple bool intraday = input.bool(false, "Allow Intra-day Updating", tooltip=intraday_tooltip, group="Hyperbolic Tangent Volatility Stop Settings")

htvs_htma_len = input.int(3, "HTMA Length", group="Hyperbolic Tangent Volatility Stop Settings")
htvs_htma_src = input.string("ohlc4", "Source", options=["open", "high", "low", "close", "oc2", "hl2", "occ3", "hlc3", "ohlc4", "hlcc4"], group="Hyperbolic Tangent Volatility Stop Settings")
htvs_htma_mult = input.float(0.3, "Hyperbolic Tangent Multiplier", minval=0.001, step=0.01, group="Hyperbolic Tangent Volatility Stop Settings")
htvs_atr_len = input.int(30, "ATR Length", group="Hyperbolic Tangent Volatility Stop Settings")
htvs_atr_mult = input.float(3.0, "ATR Multiplier", step=0.1, group="Hyperbolic Tangent Volatility Stop Settings")

htvs_src = calc_src(htvs_htma_src)
htvs_htma = htma(htvs_src, htvs_htma_len, htvs_htma_mult)
[htvs_vStop, htvs_uptrend] = htvs_volStop(htvs_htma, htvs_atr_len, htvs_atr_mult)

// Use current or previous bar's values based on intraday setting
float htvs_src_signal = intraday ? htvs_src : htvs_src[1]
float htvs_vStop_signal = intraday ? htvs_vStop : htvs_vStop[1]

// Define signal based on original logic (sig = vStop > src ? -1 : 1)
int htvs_sig = htvs_vStop_signal > htvs_src_signal ? -1 : 1
// Detect signals
bool htvs_long_signal = ta.crossover(htvs_src_signal, htvs_vStop_signal)
bool htvs_short_signal = ta.crossunder(htvs_src_signal, htvs_vStop_signal)
// Assign score based on sig
var int htvs_score = 0
if htvs_enabled
    htvs_score := htvs_sig  // Assign 1 for green (long), -1 for red (short)


// =======================================================================================================================================
// ———— Indicator 4: Dema AFR | viResearch ———— //
// =======================================================================================================================================

dema_afr_len = input.int(7, "DEMA Length", group="Dema AFR Settings")
dema_afr_src = input.source(close, "DEMA Source", group="Dema AFR Settings")
dema_afr_dema = ta.dema(dema_afr_src, dema_afr_len)

dema_afr_period = input.int(14, "ATR Period", group="Dema AFR Settings")
dema_afr_factor = input.float(1.7, "ATR Factor", step=0.1, group="Dema AFR Settings")


dema_afr_atr = ta.atr(dema_afr_period)
dema_afr_e = dema_afr_atr * dema_afr_factor

dema_afr = dema_afr_dema
dema_afr := nz(dema_afr[1], dema_afr)

dema_afr_high = dema_afr_dema + dema_afr_e
dema_afr_low = dema_afr_dema - dema_afr_e

if dema_afr_low > dema_afr
    dema_afr := dema_afr_low
if dema_afr_high < dema_afr
    dema_afr := dema_afr_high

dema_afr_L = dema_afr > dema_afr[1] and not (dema_afr[1] > dema_afr[2]) and inBacktestPeriod and barstate.isconfirmed 
dema_afr_S = dema_afr < dema_afr[1] and not (dema_afr[1] < dema_afr[2]) and inBacktestPeriod and barstate.isconfirmed

var dema_afr_vii = 0
if dema_afr_L and not dema_afr_S
    dema_afr_vii := 1
if dema_afr_S
    dema_afr_vii := -1


var dema_afr_score = 0
if dema_afr_enabled
    if dema_afr_L and not dema_afr_S
        dema_afr_score := 1
    if dema_afr_S
        dema_afr_score := -1

// =======================================================================================================================================
// ———— Indicator 5: Normalized KAMA Oscillator | IkkeOmar (Converted to v6) ———— // Link: https://www.tradingview.com/script/OwtiIzT3-Normalized-KAMA-Oscillator-Ikke-Omar/
// =======================================================================================================================================

nkama_fast_period = input.int(8, "Fast Period", minval=1, group="Normalized KAMA Oscillator Settings")
nkama_slow_period = input.int(31, "Slow Period", minval=1, group="Normalized KAMA Oscillator Settings")
nkama_er_period = input.int(22, "Efficiency Ratio Period", minval=1, group="Normalized KAMA Oscillator Settings")
nkama_norm_period = input.int(70, "Normalization Lookback", minval=1, group="Normalized KAMA Oscillator Settings")
nkama_norm = input.bool(true, "Use Normalization", group="Normalized KAMA Oscillator Settings")

nkama_col_up = color.new(#22ab94, 0)
nkama_col_dn = color.new(#f7525f, 0)

// Calculate the efficiency ratio
nkama_change = math.abs(close - close[nkama_er_period])
nkama_volatility = math.sum(math.abs(close - close[1]), nkama_er_period)
nkama_er = nkama_change / nkama_volatility

// Calculate the smoothing constant
nkama_sc = nkama_er * (2 / (nkama_fast_period + 1) - 2 / (nkama_slow_period + 1)) + 2 / (nkama_slow_period + 1)

// Calculate the KAMA
nkama_kama = ta.ema(close, nkama_fast_period) + nkama_sc * (close - ta.ema(close, nkama_fast_period))

// Normalize the oscillator
nkama_lowest = ta.lowest(nkama_kama, nkama_norm_period)
nkama_highest = ta.highest(nkama_kama, nkama_norm_period)
nkama_normalized = (nkama_kama - nkama_lowest) / (nkama_highest - nkama_lowest) - 0.5

// Detect signals based on crossing horizontal lines
nkama_long_signal = ta.crossover(nkama_normalized, 0.05) and barstate.isconfirmed and inBacktestPeriod
nkama_short_signal = ta.crossunder(nkama_normalized, -0.05) and barstate.isconfirmed and inBacktestPeriod

// Assign score for strategy, 0 if disabled
var int nkama_score = 0
if nkama_enabled
    if nkama_long_signal
        nkama_score := 1      // Long score
    else if nkama_short_signal
        nkama_score := -1     // Short score


// =======================================================================================================================================
// ———— Indicator 6: DEMA Adjusted Average True Range [BackQuant] (Converted to v6) ———— //
// =======================================================================================================================================

datr_showAtr = input.bool(true, "Plot Dema Atr on Chart?", group="DEMA ATR Settings")
datr_haCandles = input.bool(false, "Use HA Candles?", group="DEMA ATR Settings")
datr_periodDema = input.int(5, "Dema Period", group="DEMA ATR Settings")
datr_sourceDema = input.source(close, "Calculation Source", group="DEMA ATR Settings")
datr_periodAtr = input.int(14, "Period", group="DEMA ATR Settings")
datr_factorAtr = input.float(1.6, "Factor", step=0.01, group="DEMA ATR Settings")
datr_paintCandles = input.bool(false, "Paint Candles According to trend?", group="DEMA ATR Settings")
datr_showMA = input.bool(false, "Show Atr Moving Average as Confluence?", group="Confluence")
datr_movingAverageType = input.string("Ema", title="MA Type", options=["SMA", "Hull", "Ema", "Wma", "Dema"], group="Confluence")
datr_movingAveragePeriod = input.int(40, "Moving Average Period", group="Confluence")
datr_longColour = color.new(#00ff00, 0)
datr_shortColour = color.new(#ff0000, 0)

// Use HA Candles?
datr_heikinashi_close = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close, barmerge.gaps_off)
var series float datr_source = close
if datr_haCandles
    datr_source := datr_heikinashi_close
else
    datr_source := datr_sourceDema

// Function to calculate DEMA ATR with Bands
datr_DemaAtrWithBands(periodDema, source, lookback, atrFactor) =>
    ema1 = ta.ema(source, periodDema)
    ema2 = ta.ema(ema1, periodDema)
    demaOut = 2 * ema1 - ema2
    atr = ta.atr(lookback)
    trueRange = atr * atrFactor
    datr_DemaAtr = demaOut
    datr_DemaAtr := nz(datr_DemaAtr[1], datr_DemaAtr)
    trueRangeUpper = demaOut + trueRange
    trueRangeLower = demaOut - trueRange
    if trueRangeLower > datr_DemaAtr
        datr_DemaAtr := trueRangeLower
    if trueRangeUpper < datr_DemaAtr
        datr_DemaAtr := trueRangeUpper
    datr_DemaAtr

// Calculate DEMA ATR
datr_DemaAtr = datr_DemaAtrWithBands(datr_periodDema, datr_source, datr_periodAtr, datr_factorAtr)

// Moving Average Switch Type
datr_movingAverage(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Hull" => ta.hma(source, length)
        "Ema" => ta.ema(source, length)
        "Wma" => ta.wma(source, length)
        "Dema" => ta.dema(source, length)
        => ta.ema(source, length)  // Default fallback

datr_maOut = datr_movingAverage(datr_DemaAtr, datr_movingAveragePeriod, datr_movingAverageType)

// Conditions for signals
datr_L = ta.crossover(datr_DemaAtr, datr_DemaAtr[1]) and barstate.isconfirmed and inBacktestPeriod
datr_S = ta.crossunder(datr_DemaAtr, datr_DemaAtr[1]) and barstate.isconfirmed and inBacktestPeriod

// Track signal state
var int datr_vii = 0
if datr_L and not datr_S
    datr_vii := 1
else if datr_S
    datr_vii := -1

// Assign score for strategy, 0 if disabled
var int datr_score = 0
if datr_enabled
    if datr_L
        datr_score := 1
    else if datr_S
        datr_score := -1

// Update activeCount and totalScore for combined signal logic
activeCount = (med_st_enabled ? 1 : 0) +
               (fdi_enabled ? 1 : 0) +
               (htvs_enabled ? 1 : 0) +
               (dema_afr_enabled ? 1 : 0) +
               (nkama_enabled ? 1 : 0) +
               (datr_enabled ? 1 : 0)

totalScore = (med_st_enabled ? med_st_score : 0) +
              (fdi_enabled ? fdi_score : 0) +
              (htvs_enabled ? htvs_score : 0) +
              (dema_afr_enabled ? dema_afr_score : 0) +
              (nkama_enabled ? nkama_score : 0) +
              (datr_enabled ? datr_score : 0)



finalSignal = activeCount > 0 ? totalScore / activeCount : 0
// ———— Trade Execution Based on finalSignal ———— //
if tradeMode == "Long Only"
    if finalSignal >= 0.1
        // If we are short, first close the short position.
        if strategy.position_size < 0
            strategy.entry("Long", strategy.long)
        // If we are flat, enter long.
        else if strategy.position_size == 0
            strategy.entry("Long", strategy.long)
        // If already long, do nothing.
        else
            na

    else if finalSignal <= -0.1
        // If we are long, first close the long position.
        if strategy.position_size > 0
            strategy.close("Long")

        // If we are flat, enter short.
        else
            na

    else if finalSignal > -0.1 and finalSignal < 0.1
        // When finalSignal is 0, do nothing.
        na
else if tradeMode == "Long and Short"
    if finalSignal >= 0.1
        // If we are short, first close the short position.
        if strategy.position_size < 0
            strategy.close("Short")
            strategy.entry("Long", strategy.long)
        // If we are flat, enter long.
        else if strategy.position_size == 0
            strategy.entry("Long", strategy.long)
        // If already long, do nothing.
        else
            na

    else if finalSignal <= -0.1
        // If we are long, first close the long position.
        if strategy.position_size > 0
            strategy.close("Long")
            strategy.entry("Short", strategy.short)
        // If we are flat, enter short.
        else if strategy.position_size == 0
            strategy.entry("Short", strategy.short)
        // If already short, do nothing.
        else
            na

    else if finalSignal > -0.1 and finalSignal < 0.1
        // When finalSignal is 0, do nothing.
        na

// =======================================================================================================================================
// ———— Visuals ———— //
// =======================================================================================================================================
// Plot Median Supertrend line (hidden)
// =======================================================================================================================================
plot(med_st_x, color=med_st_d < 0 ? color.rgb(0, 255, 187) : color.rgb(255, 0, 157), linewidth=2, title="Median Supertrend", display=display.none)
// Plot Median Supertrend signals (hidden)
plotshape(med_st_L, title="Median Long", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.tiny, display=display.none)
plotshape(med_st_S, title="Median Short", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.tiny, display=display.none)

// =======================================================================================================================================
// Plot FDI-Adaptive Supertrend line (hidden)
// =======================================================================================================================================
plot(fdi_supertrend, color=fdi_direction == -1 ? fdi_greencolor : fdi_redcolor, linewidth=3, title="FDI Supertrend", display=display.none)
// Plot FDI-Adaptive Supertrend signals (hidden)
plotshape(fdi_goLong, title="FDI Long", style=shape.triangleup, location=location.belowbar, color=color.yellow, size=size.tiny, display=display.none)
plotshape(fdi_goShort, title="FDI Short", style=shape.triangledown, location=location.abovebar, color=color.fuchsia, size=size.tiny, display=display.none)

// =======================================================================================================================================
// Plot Hyperbolic Tangent Volatility Stop (hidden)
// =======================================================================================================================================
plot(htvs_src, "Source", color=color.blue)
plot(htvs_vStop, "Volatility Stop", color=color.red)
plotshape(htvs_long_signal, "Long Signal", shape.triangleup, location.belowbar, color.green)
plotshape(htvs_short_signal, "Short Signal", shape.triangledown, location.abovebar, color.red)

// =======================================================================================================================================
// Plot Dema AFR (hidden)
// =======================================================================================================================================
plot(dema_afr, "Dema AFR", color=dema_afr_vii == 1 ? color.rgb(0, 255, 187) : dema_afr_vii == -1 ? color.rgb(255, 0, 157) : na, linewidth=2, display=display.none)

// =======================================================================================================================================
// ———— Plot Normalized KAMA Oscillator ———— //
// =======================================================================================================================================
nkama_col_wn = nkama_normalized < 0 ? (nkama_normalized < nkama_normalized[1] ? color.new(nkama_col_dn, 50) : color.new(nkama_col_dn, 75)) : (nkama_normalized > nkama_normalized[1] ? color.new(nkama_col_up, 50) : color.new(nkama_col_up, 75))
plot(nkama_norm ? nkama_normalized : na, style=plot.style_columns, color=nkama_col_wn, title="KAMA Oscillator Normalized", display=display.none)
plot(not nkama_norm ? nkama_kama : na, style=plot.style_columns, color=nkama_col_wn, title="KAMA Oscillator", display=display.none)
hline(0.2, color=nkama_col_up, linestyle=hline.style_dashed, display=display.none)
hline(-0.2, color=nkama_col_dn, linestyle=hline.style_dashed, display=display.none)

// =======================================================================================================================================
// ———— Visuals for DEMA Adjusted Average True Range ———— //
// =======================================================================================================================================
var color datr_Trend = #ffffff

if datr_L
    datr_Trend := datr_longColour

if datr_S
    datr_Trend := datr_shortColour
// datr_Trend := datr_L ? datr_longColour : datr_S ? datr_shortColour : color.new(#ffffff, 0)
plot(datr_showAtr ? datr_DemaAtr : na, "ATR", color=datr_Trend, linewidth=2, display=display.none)
barcolor(datr_paintCandles ? datr_Trend : na, display=display.none)
plot(datr_showMA ? datr_maOut : na, "Moving Average", color=color.new(color.white, 0), linewidth=2, style=plot.style_line, display=display.none)


// =======================================================================================================================================
// Plot final signal line
// =======================================================================================================================================
plot(finalSignal, title="Final Signal", style=plot.style_line, color=finalSignal >= 0.1 ? color.green : finalSignal <= -0.1 ? color.red : color.gray)


// =======================================================================================================================================
// ———— Table Display: Indicator Name and State ———— //
// =======================================================================================================================================

var table indicatorTable = table.new(position.top_right, 2, 8, border_width=1)
var table dateTable = table.new(position.middle_left, 2, 1, border_width=1)

table.cell(dateTable, 0, 0, "Date", bgcolor=color.rgb(54, 58, 69, 64), text_color=color.white, text_size=size.normal)
table.cell(dateTable, 1, 0, str.tostring(year) + "-0" + str.tostring(month) + "-" + str.tostring(dayofmonth), bgcolor=color.rgb(54, 58, 69, 64), text_color=color.white, text_size=size.normal)

table.cell(indicatorTable, 0, 0, "Indicator", bgcolor=color.black, text_color=color.white, text_size=size.normal)
table.cell(indicatorTable, 1, 0, "State", bgcolor=color.black, text_color=color.white, text_size=size.normal)

table.cell(indicatorTable, 0, 1, "Median ST", bgcolor=color.silver, text_color=color.black)
table.cell(indicatorTable, 1, 1, str.tostring(med_st_score), bgcolor=color.silver, text_color=color.black)

table.cell(indicatorTable, 0, 2, "FDI ST", bgcolor=color.silver, text_color=color.black)
table.cell(indicatorTable, 1, 2, str.tostring(fdi_score), bgcolor=color.silver, text_color=color.black)

table.cell(indicatorTable, 0, 3, "HTVS", bgcolor=color.silver, text_color=color.black)
table.cell(indicatorTable, 1, 3, str.tostring(htvs_score), bgcolor=color.silver, text_color=color.black)

table.cell(indicatorTable, 0, 4, "Dema AFR", bgcolor=color.silver, text_color=color.black)
table.cell(indicatorTable, 1, 4, str.tostring(dema_afr_score), bgcolor=color.silver, text_color=color.black)

table.cell(indicatorTable, 0, 5, "Norm KAMA", bgcolor=color.silver, text_color=color.black)
table.cell(indicatorTable, 1, 5, str.tostring(nkama_score), bgcolor=color.silver, text_color=color.black)

table.cell(indicatorTable, 0, 6, "DEMA ATR", bgcolor=color.silver, text_color=color.black)
table.cell(indicatorTable, 1, 6, str.tostring(datr_score), bgcolor=color.silver, text_color=color.black)

table.cell(indicatorTable, 0, 7, "Score", bgcolor=color.rgb(189, 190, 178), text_color=color.black)
table.cell(indicatorTable, 1, 7, str.tostring(finalSignal), bgcolor=color.silver, text_color=color.black)